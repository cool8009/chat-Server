{"version":3,"sources":["agents.ts","components/SendMessageForm.js","components/MessageContainer.js","components/ConnectedUsers.js","components/Chat.js","layout/Navbar.js","application/stores/store.ts","application/stores/userStore.ts","users/LogionForm.tsx","features/home/HomePage.tsx","App.js","reportWebVitals.js","index.js"],"names":["axios","defaults","baseURL","responseBody","response","data","requests","url","get","then","body","post","agent","Messages","list","e","console","log","create","message","Account","current","login","user","register","SendMessageForm","sendMessage","useState","setMessage","Form","onSubmit","preventDefault","InputGroup","FormControl","type","placeholder","onChange","target","value","Append","Button","variant","disabled","MessageContainer","messages","prevMessages","messageRef","useRef","useEffect","scrollHeight","clientHeight","scrollTo","left","top","behavior","ref","className","map","m","index","ConnectedUsers","users","u","idx","Chat","closeConnection","onClick","Navbar","Menu","inverted","fixed","Container","MenuItem","to","positive","content","store","userStore","token","appLoaded","cerds","a","setToken","runInAction","window","localStorage","setItem","setAppLoaded","makeAutoObservable","this","StoreContext","createContext","observer","joinChat","useContext","initialValues","username","password","values","JSON","stringify","handleSubmit","isSubmitting","handleChange","autoComplete","Input","name","loading","fluid","HomePage","App","connection","setConnection","setMessages","setUsers","setPrevMessages","HubConnectionBuilder","withUrl","configureLogging","LogLevel","Information","build","on","onclose","start","invoke","stop","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34f4e936.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios';\r\nimport { Message } from './application/api/models/message';\r\nimport { UserFormValues } from './application/api/models/user'; \r\nimport { User } from './application/api/models/user';\r\n\r\n//sets a default url for the agent\r\naxios.defaults.baseURL = \"http://localhost:9223/api\";\r\n//gets the response data to a variable called response body\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n  get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n  post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n  put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n  del: <T> (url: string) => axios.delete<T>(url).then(responseBody),\r\n};\r\n//makes a request to the api server\r\nconst Messages = {\r\n  list: function () {\r\n    try {\r\n\r\n      return requests.get(\"/messages\");\r\n    }\r\n    catch (e) {\r\n      console.log(e);\r\n    }\r\n  },\r\n  create: function (message: Message) {\r\n    return requests.post(\"/messages\", message);\r\n  },\r\n};\r\n\r\nconst Account = {\r\n  current: () => requests.get<User>('/account'),\r\n  login: (user: UserFormValues) => requests.post<User>('/account/login',user),\r\n  register: (user: UserFormValues) => requests.post<User>('/account/register',user)\r\n}\r\nconst agent = {\r\n  Messages,\r\n  Account\r\n};\r\nexport default agent;\r\n","import { Form, Button, FormControl, InputGroup } from 'react-bootstrap';\nimport { useState } from 'react';\n\n\nconst SendMessageForm = ({ sendMessage }) => {\n    const [message, setMessage] = useState('');\n\n    return <Form\n        onSubmit={e => {\n            e.preventDefault();\n            sendMessage(message);\n            setMessage('');\n        }}>\n        <InputGroup>\n            <FormControl type=\"user\" placeholder=\"message...\"\n                onChange={e => setMessage(e.target.value)} value={message} />\n            <InputGroup.Append>\n                <Button variant=\"primary\" type=\"submit\" disabled={!message}>Send</Button>\n            </InputGroup.Append>\n        </InputGroup>\n    </Form>\n}\n\nexport default SendMessageForm;","import { useEffect, useRef } from 'react';\n\n//comp that desplay the message\nconst MessageContainer = ({ messages, prevMessages }) => {\n    const messageRef = useRef();\n    //TODO: TRY TO MAKE THIS WORK, FOR SOME REASON IT DOESNT FETCH MESSAGES FROM THE API\n    //to scroll when there are new messages\n    useEffect(() => {\n        if (messageRef && messageRef.current) {\n            const { scrollHeight, clientHeight } = messageRef.current;\n            messageRef.current.scrollTo({ left: 0, top: scrollHeight - clientHeight, behavior: 'smooth' });\n        }\n    }, [messages]);\n\n    return <div ref={messageRef} className='message-container' >\n        {prevMessages.map((m, index) =>\n            <div key={index} className='user-message'>\n                <div className='message bg-primary'>{m.message}</div>\n                <div className='from-user'>placeholderuser</div>\n            </div>\n        )}\n        {messages.map((m, index) =>\n            <div key={index} className='user-message'>\n                <div className='message bg-primary'>{m.message}</div>\n                <div className='from-user'>{m.user}</div>\n            </div>\n        )}\n    </div>\n}\n\nexport default MessageContainer;","const ConnectedUsers = ({ users }) => <div className='user-list'>\n    <h4>Connected Users</h4>\n    {users.map((u, idx) => <h6 key={idx}>{u}</h6>)}\n</div>\n\nexport default ConnectedUsers;","import SendMessageForm from './SendMessageForm';\nimport MessageContainer from './MessageContainer';\nimport ConnectedUsers from './ConnectedUsers';\nimport { Button } from 'react-bootstrap';\n\n\nconst Chat = ({ sendMessage, messages, users, closeConnection, prevMessages }) => <div>\n    <div className='leave-chat'>\n        <Button variant='danger' onClick={() => closeConnection()}>Leave</Button>\n    </div>\n    <ConnectedUsers users={users} />\n    <div className='chat'>\n        <MessageContainer prevMessages={prevMessages} messages={messages} />\n        <SendMessageForm sendMessage={sendMessage} />\n    </div>\n</div>\n\nexport default Chat;","import React from \"react\";\nimport { Container, Menu, Button, MenuItem } from \"semantic-ui-react\";\n\nexport default function Navbar() {\n\n    return (\n        <Menu inverted fixed='top' className='menu'>\n            <Container>\n                <MenuItem className='item'>\n                    Backgammon\n                </MenuItem>\n                <MenuItem>\n                    <Button to='/lobby' positive content='Lobby' />\n                </MenuItem>\n            </Container>\n        </Menu>\n\n    );\n\n}","import { createContext, useContext } from \"react\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store{\r\n    userStore: UserStore;\r\n}\r\n\r\nexport const store: Store ={\r\n    userStore: new UserStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}\r\n\r\n","import { User, UserFormValues } from \"../api/models/user\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../../agents\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    token: string | null = null;\r\n    appLoaded = false;\r\n\r\n    constructor() { \r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (cerds: UserFormValues) => {\r\n        try{\r\n            const user = await agent.Account.login(cerds);\r\n            this.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            console.log(user);\r\n        } catch(error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        if (token) window.localStorage.setItem('jwt_token', token);\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n\r\n}","import { Formik, Form } from 'formik';\r\nimport { observe } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport React from 'react';\r\nimport { Input , Button } from 'semantic-ui-react';\r\nimport { useStore } from '../application/stores/store';\r\n\r\nexport default observer(function LoginForm( {joinChat} : {joinChat: any}) {\r\n    const {userStore} = useStore();\r\n    \r\n    return (\r\n        <Formik\r\n            initialValues={{username: '', password:''}}\r\n            onSubmit={(values) => {\r\n                console.log(JSON.stringify(values, null, 2));\r\n                userStore.login(values);\r\n                joinChat(values.username);\r\n                }\r\n            }\r\n        >\r\n            {({handleSubmit ,isSubmitting,handleChange})=> (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Input name='username' placeholder='User' onChange={handleChange}/>\r\n                    <Input name='password' placeholder='Password' type='password' onChange={handleChange}/>\r\n                    <Button loading={isSubmitting} positive content ='Login' type='submit' fluid/>\r\n                </Form>\r\n            )\r\n        }\r\n        </Formik>\r\n    )    \r\n})\r\n","import react from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\n\r\n\r\nexport default function HomePage() {\r\n\r\n    return (\r\n        <Container>\r\n            <h1>homepage</h1>\r\n        </Container>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\nimport agent from './agents';\nimport { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport Lobby from './components/Lobby';\nimport Chat from './components/Chat';\nimport Navbar from './layout/Navbar';\nimport {Route} from 'react-router-dom';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport LoginForm from './users/LogionForm';\nimport HomePage from './features/home/HomePage.tsx';\n\n\n\nconst App = () => {\n  const [connection, setConnection] = useState();\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [prevMessages, setPrevMessages] = useState([]);\n  useEffect(() => {\n    agent.Messages.list().then(response => {\n      console.log(response);\n      setPrevMessages(response);\n    })\n  }, [])\n  //create connection\n  const joinChat = async (user) => {\n    try {\n      //using singnalr\n      const connection = new HubConnectionBuilder()\n        .withUrl(\"http://localhost:9223/chat\")\n        .configureLogging(LogLevel.Information)\n        .build();\n\n      //the server push message to the client\n      connection.on(\"ReceiveMessage\", (user, message) => {\n        setMessages(messages => [...messages, { user, message }]);\n        setPrevMessages(messages => [...messages, message])\n      });\n\n      //get list of connect users\n      connection.on(\"UsersInChat\", (users) => {\n        setUsers(users);\n      });\n\n      //leave chat\n      connection.onclose(e => {\n        setConnection();\n        setMessages([]);\n        setUsers([]);\n      });\n      \n      \n      await connection.start();\n      //to notify connection to the chat(Joinchat func at ChatHub)\n      await connection.invoke(\"JoinChat\", { user });\n      setConnection(connection);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  //use singalr connection to the sendmessage(SendMessage func at ChatHub)\n  const sendMessage = async (message) => {\n    try {\n      await connection.invoke(\"SendMessage\", message);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  //to leave chat\n  const closeConnection = async () => {\n    try {\n      await connection.stop();\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  return <div className='app'>\n    <Navbar/>\n    {/* <LoginForm joinChat={joinChat}/> */}\n    <h2>Backgammon Chat</h2>\n    <Route path='/' component={HomePage}/>\n    <Route path='/chat' component={Chat}/>\n    <Route path='/' component={HomePage}/>\n\n    {!connection //if there is connection desplay lobby\n      ? <LoginForm joinChat={joinChat}/>\n      : <Chat sendMessage={sendMessage} prevMessages={prevMessages} messages={messages} users={users} closeConnection={closeConnection} />}\n  </div>\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}